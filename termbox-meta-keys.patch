diff --git a/src/demo/keyboard.c b/src/demo/keyboard.c
index e2164d3..0666627 100644
--- a/src/demo/keyboard.c
+++ b/src/demo/keyboard.c
@@ -614,8 +614,7 @@ void pretty_print_press(struct tb_event *ev)
 	printf_tb(60, 21, TB_CYAN  , TB_DEFAULT, "octal:   0%o", ev->ch);
 	printf_tb(60, 22, TB_RED   , TB_DEFAULT, "string:  %s", buf);
 
-	printf_tb(54, 18, TB_WHITE, TB_DEFAULT, "Modifier: %s",
-			(ev->mod) ? "TB_MOD_ALT" : "none");
+	printf_tb(54, 18, TB_WHITE, TB_DEFAULT, "Meta/mod: %d/%s", ev->meta, (ev->mod) ? "TB_MOD_ALT" : "none");
 
 }
 
diff --git a/src/input.inl b/src/input.inl
index a4dbfca..679a1e5 100644
--- a/src/input.inl
+++ b/src/input.inl
@@ -137,6 +137,44 @@ static int parse_mouse_event(struct tb_event *event, const char *buf, int len) {
 	return 0;
 }
 
+// function ported from tcolar's termbox-go fork:
+// https://github.com/tcolar/termbox-go/commit/8e386c1b6b783dee1904d688347e2d282450b8e7
+
+// example bufs:
+// [27, 91, 49, 59, 50, 65] --> shift + up arrow
+// [27, 91, 49, 59, 50, 66] --> shift + down arrow
+static bool parse_meta_key(struct tb_event *event, const char *buf, const char *key) {
+ 
+	int kl = strlen(key);
+
+	if (strlen(buf) < kl+2) {
+		return false;
+	}
+	
+	if (buf[0] != key[0] || buf[1] != key[1]) {
+		return false;
+	}
+
+/*
+	int i;
+	printf("\nbuf: --> ");
+	for (i = 0; i < strlen(buf); i++)
+		printf("%d ", buf[i]);
+
+	printf("\nkey: --> ");
+	for (i = 0; i < strlen(key); i++)
+		printf("%d ", key[i]);
+*/
+
+  // i'm not sure why this happens, but there's a one byte difference with the Go version
+	// if (buf[kl-1] != 49) { // ';'
+	if (buf[kl-2] != 49) { // ';'
+		return false;
+	}
+
+	if (buf[kl] < 50 || buf[kl] > 57) { // 2 to 9 ASCII
+		return false;
+	}
+
+	if (buf[kl+1] != key[kl-1]) {
+		return false;
+	}
+	
+	event->ch = 0;
+	event->meta = buf[kl] - 48;
+
+	return true;
+}
+
 // convert escape sequence to event, and return consumed bytes on success (failure == 0)
 static int parse_escape_seq(struct tb_event *event, const char *buf, int len)
 {
@@ -148,12 +186,44 @@ static int parse_escape_seq(struct tb_event *event, const char *buf, int len)
 	// it's pretty simple here, find 'starts_with' match and return
 	// success, else return failure
 	int i;
+	char desc[20];
 	for (i = 0; keys[i]; i++) {
+
 		if (starts_with(buf, len, keys[i])) {
 			event->ch = 0;
 			event->key = 0xFFFF-i;
 			return strlen(keys[i]);
 		}
+
+		if (parse_meta_key(event, buf, keys[i])) {
+			event->key = 0xFFFF-i;
+			return strlen(keys[i]) + 2;
+		}
+
+		if (keys[i][1] == 79) { // 'O'
+			// For some crazy reason xterm sends LeftArrow as [27,79,68]
+			// but Shift+LeftArrow as [27,91,49,59,50,68]
+			// the extra [59, 50] was expected but not the [79] -> [91,49]
+			// Basically seems to be sent in SS3 format in the first case
+			// but in CSI format in the second !
+			// http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-PC-Style-Function-Keys
+			int keylen = strlen(keys[i]);
+			char k2[4]; // k2[keylen+1];
+			k2[0] = keys[i][0];
+			k2[1] = 91;
+			k2[2] = 49;
+
+			int a;
+			for (a = 2; a < keylen; a++) {
+				k2[a+1] = keys[i][a];
+			}
+
+			sprintf(desc, "k2 (%d): %d, %d, %d", (int)strlen(k2), k2[0], k2[1], k2[2]);
+			if (parse_meta_key(event, buf, k2)) {
+				event->key = 0xFFFF-i;
+				return strlen(k2) + 2;
+			}
+		}
 	}
 	return 0;
 }
@@ -164,7 +234,7 @@ static bool extract_event(struct tb_event *event, struct bytebuffer *inbuf, int
 	const int len = inbuf->len;
 	if (len == 0)
 		return false;
-
+		
 	if (buf[0] == '\033') {
 		int n = parse_escape_seq(event, buf, len);
 		if (n != 0) {
@@ -202,7 +272,7 @@ static bool extract_event(struct tb_event *event, struct bytebuffer *inbuf, int
 
 	// first of all check if it's a functional key
 	if ((unsigned char)buf[0] <= TB_KEY_SPACE ||
-	    (unsigned char)buf[0] == TB_KEY_BACKSPACE2)
+			(unsigned char)buf[0] == TB_KEY_BACKSPACE2)
 	{
 		// fill event, pop buffer, return success */
 		event->ch = 0;
diff --git a/src/termbox.h b/src/termbox.h
index dc2d372..fcfa505 100644
--- a/src/termbox.h
+++ b/src/termbox.h
@@ -94,6 +94,17 @@ extern "C" {
 #define TB_KEY_BACKSPACE2       0x7F
 #define TB_KEY_CTRL_8           0x7F /* clash with 'BACKSPACE2' */
 
+enum {
+	TB_META_SHIFT = 2,
+	TB_META_ALT,
+	TB_META_ALTSHIFT,
+	TB_META_CTRL,
+	TB_META_CTRLSHIFT,
+	TB_META_ALTCTRL,
+	TB_META_ALTCTRLSHIFT,
+	TB_META_META
+};
+
 /* These are non-existing ones.
  *
  * #define TB_KEY_CTRL_1 clash with '1'
@@ -156,6 +167,7 @@ struct tb_event {
 	uint8_t mod; /* modifiers to either 'key' or 'ch' below */
 	uint16_t key; /* one of the TB_KEY_* constants */
 	uint32_t ch; /* unicode character */
+	uint8_t meta;
 	int32_t w;
 	int32_t h;
 	int32_t x;
